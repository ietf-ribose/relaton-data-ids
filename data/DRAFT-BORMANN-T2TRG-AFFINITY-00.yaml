---
id: I-D.bormann-t2trg-affinity
title:
  content: Providing Instance Affinity in Dyncast
  language: en
  script: Latn
  format: text/plain
link:
  content: https://www.ietf.org/archive/id/draft-bormann-t2trg-affinity-00.txt
  type: TXT
type: standard
docid:
- id: I-D.bormann-t2trg-affinity
  type: rfc-anchor
- id: draft-bormann-t2trg-affinity-00
  type: Internet-Draft
docnumber: I-D.bormann-t2trg-affinity
date:
  type: published
  value: '2021-08-30'
contributor:
  person:
    name:
      completename:
        content: Carsten Bormann
        language: en
    affiliation:
      organization:
        name: Universit√§t Bremen TZI
  role: author
revdate: '2021-08-30'
language: en
script: Latn
abstract:
  content: "\n\t <p>   Dyncast support in a network provides a client with a fresh
    optimal\n   path to a service provider instance, where optimality includes both\n
    \  path and service provider characteristics.  As a service invocation\n   usually
    takes more than one packet, dyncast needs to provide instance\n   affinity for
    each service invocation.  Naive implementations of\n   instance affinity require
    per-application, per service-invocation\n   state in the network.\n\n   The present
    short document defines a way to provide instance affinity\n   that does not require,
    but also does not rule out per-application\n   state.\n\n   It also discusses
    how the information that an application needs to\n   operate this mechanism can
    be provided via the discovery mechanisms\n   offered by a CoRE (Constrained RESTful
    Environments) server, either\n   in \"/.well-known/core\" or via the CoRE resource
    directory.\n\n\t </p>\n      "
  language: en
  script: Latn
  format: text/html
series:
  type: main
  title:
    content: Internet-Draft
    language: en
    script: Latn
    format: text/plain
  number: draft-bormann-t2trg-affinity-00
doctype: internet-draft
