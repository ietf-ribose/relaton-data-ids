---
id: I-D.secure-cookie-session-protocol
title:
  content: 'SCS: Secure Cookie Sessions for HTTP'
  language: en
  script: Latn
  format: text/plain
link:
  content: https://www.ietf.org/archive/id/draft-secure-cookie-session-protocol-05.txt
  type: TXT
type: standard
docid:
- id: I-D.secure-cookie-session-protocol
  type: rfc-anchor
- id: draft-secure-cookie-session-protocol-05
  type: Internet-Draft
docnumber: I-D.secure-cookie-session-protocol
date:
  type: published
  value: '2012-09-07'
contributor:
- person:
    name:
      initial:
        content: S.
        language: en
      surname:
        content: Barbato
        language: en
      completename:
        content: Stefano Barbato
        language: en
  role: author
- person:
    name:
      initial:
        content: S.
        language: en
      surname:
        content: Dorigotti
        language: en
      completename:
        content: Steven Dorigotti
        language: en
  role: author
- person:
    name:
      initial:
        content: T.
        language: en
      surname:
        content: Fossati
        language: en
      completename:
        content: Thomas Fossati
        language: en
  role: author
revdate: '2012-09-07'
language: en
script: Latn
abstract:
  content: "\n\t <p>   This document provides an overview of SCS, a small cryptographic\n
    \  protocol layered on top of the HTTP cookie facility, that allows its\n   users
    to produce and consume authenticated and encrypted cookies, as\n   opposed to
    usual cookies, which are un-authenticated and sent in\n   clear text.\n\n   An
    interesting property, rising naturally from the given\n   confidentiality and
    authentication properties, is that by using SCS\n   cookies, it is possible to
    avoid storing the session state material\n   on the server side altogether.  In
    fact, an SCS cookie presented by\n   the user agent to the origin server can always
    be validated (i.e.\n   possibly recognized as self-produced, fresh, untampered
    material)\n   and, as such, be used to safely restore application state.\n\n   Hence,
    typical use cases may include devices with little or no\n   storage offering some
    functionality via an HTTP interface, as well as\n   web applications with high
    availability or load balancing\n   requirements which would prefer to handle application
    state without\n   the need to synchronize the pool through shared storage or peering.\n\n
    \  Another noteworthy application scenario is represented by the\n   distribution
    of authorized web content (e.g. by CDNs), where an SCS\n   token can be used,
    either in a cookie or embedded in the URI, to\n   provide evidence of the entitlement
    to access the associated resource\n   by the requesting user agent.\n\n   Nevertheless,
    its security properties allow SCS to be used whenever\n   the privacy and integrity
    of cookies is a concern, by paying an\n   affordable price in terms of increased
    cookie size, additional CPU\n   clock cycles needed by the symmetric key encryption
    and HMAC\n   algorithms, and related key management, which can be made a nearly\n
    \  transparent task.\n\n\t </p>\n      "
  language: en
  script: Latn
  format: text/html
series:
  type: main
  title:
    content: Internet-Draft
    language: en
    script: Latn
    format: text/plain
  number: draft-secure-cookie-session-protocol-05
doctype: internet-draft
